
ex_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001c9c  08001c9c  00011c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc0  08001cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cc0  08001cc0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cc0  08001cc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cc4  08001cc4  00011cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001cd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001cd4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dc2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e2a  00000000  00000000  00022df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00023c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  000240a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015612  00000000  00000000  000244a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000515e  00000000  00000000  00039ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079be9  00000000  00000000  0003ec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b87f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001048  00000000  00000000  000b884c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c84 	.word	0x08001c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c84 	.word	0x08001c84

0800014c <led7seg_0.1>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void led7seg_0(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000156:	2200      	movs	r2, #0
 8000158:	2101      	movs	r1, #1
 800015a:	4813      	ldr	r0, [pc, #76]	; (80001a8 <led7seg_0.1+0x5c>)
 800015c:	f001 f970 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4810      	ldr	r0, [pc, #64]	; (80001a8 <led7seg_0.1+0x5c>)
 8000166:	f001 f96b 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	2104      	movs	r1, #4
 800016e:	480e      	ldr	r0, [pc, #56]	; (80001a8 <led7seg_0.1+0x5c>)
 8000170:	f001 f966 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 8000174:	2200      	movs	r2, #0
 8000176:	2120      	movs	r1, #32
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <led7seg_0.1+0x5c>)
 800017a:	f001 f961 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <led7seg_0.1+0x5c>)
 8000186:	f001 f95b 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000190:	4805      	ldr	r0, [pc, #20]	; (80001a8 <led7seg_0.1+0x5c>)
 8000192:	f001 f955 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	4803      	ldr	r0, [pc, #12]	; (80001a8 <led7seg_0.1+0x5c>)
 800019c:	f001 f950 	bl	8001440 <HAL_GPIO_WritePin>
    }
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010c00 	.word	0x40010c00

080001ac <main>:
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af00      	add	r7, sp, #0
int main(void)
 80001b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b6:	603b      	str	r3, [r7, #0]
  HAL_Init();
 80001b8:	f000 fe5c 	bl	8000e74 <HAL_Init>
  SystemClock_Config();
 80001bc:	f000 fd4c 	bl	8000c58 <SystemClock_Config>
  MX_GPIO_Init();
 80001c0:	f000 fd86 	bl	8000cd0 <MX_GPIO_Init>
      		  break;
      	  default:
      		  break;
      	  }
        }
    int count_1 = 6;
 80001c4:	2306      	movs	r3, #6
 80001c6:	61fb      	str	r3, [r7, #28]
    int count_2 = 4;
 80001c8:	2304      	movs	r3, #4
 80001ca:	61bb      	str	r3, [r7, #24]
    int time_counter_7seg = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	617b      	str	r3, [r7, #20]
#define GREEN_TIME 3000
#define DELAY 10
#define RED 1
#define YELLOW 2
#define GREEN 3
  int time_counter_1 = 0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  int time_counter_2 = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  int status_1 = RED;
 80001d8:	2301      	movs	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
  int status_2 = GREEN;
 80001dc:	2303      	movs	r3, #3
 80001de:	607b      	str	r3, [r7, #4]
  while (1)
  {
	if(time_counter_1 > 0) {
 80001e0:	693b      	ldr	r3, [r7, #16]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	dd03      	ble.n	80001ee <main+0x42>
		time_counter_1--;
 80001e6:	693b      	ldr	r3, [r7, #16]
 80001e8:	3b01      	subs	r3, #1
 80001ea:	613b      	str	r3, [r7, #16]
 80001ec:	e051      	b.n	8000292 <main+0xe6>
	}else {
		switch(status_1){
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	2b03      	cmp	r3, #3
 80001f2:	d036      	beq.n	8000262 <main+0xb6>
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	2b03      	cmp	r3, #3
 80001f8:	dc4a      	bgt.n	8000290 <main+0xe4>
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d003      	beq.n	8000208 <main+0x5c>
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	2b02      	cmp	r3, #2
 8000204:	d017      	beq.n	8000236 <main+0x8a>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
			time_counter_1 = GREEN_TIME/DELAY;
			count_1 = 4;
			break;
		default:
			break;
 8000206:	e043      	b.n	8000290 <main+0xe4>
			status_1 = GREEN;
 8000208:	2303      	movs	r3, #3
 800020a:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2120      	movs	r1, #32
 8000210:	4864      	ldr	r0, [pc, #400]	; (80003a4 <main+0x1f8>)
 8000212:	f001 f915 	bl	8001440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2140      	movs	r1, #64	; 0x40
 800021a:	4862      	ldr	r0, [pc, #392]	; (80003a4 <main+0x1f8>)
 800021c:	f001 f910 	bl	8001440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	485f      	ldr	r0, [pc, #380]	; (80003a4 <main+0x1f8>)
 8000226:	f001 f90b 	bl	8001440 <HAL_GPIO_WritePin>
			time_counter_1 = RED_TIME/DELAY;
 800022a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800022e:	613b      	str	r3, [r7, #16]
			count_1 = 6;
 8000230:	2306      	movs	r3, #6
 8000232:	61fb      	str	r3, [r7, #28]
			break;
 8000234:	e02d      	b.n	8000292 <main+0xe6>
			status_1 = RED;
 8000236:	2301      	movs	r3, #1
 8000238:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2120      	movs	r1, #32
 800023e:	4859      	ldr	r0, [pc, #356]	; (80003a4 <main+0x1f8>)
 8000240:	f001 f8fe 	bl	8001440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2140      	movs	r1, #64	; 0x40
 8000248:	4856      	ldr	r0, [pc, #344]	; (80003a4 <main+0x1f8>)
 800024a:	f001 f8f9 	bl	8001440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	4854      	ldr	r0, [pc, #336]	; (80003a4 <main+0x1f8>)
 8000254:	f001 f8f4 	bl	8001440 <HAL_GPIO_WritePin>
			time_counter_1 = YELLOW_TIME/DELAY;
 8000258:	23c8      	movs	r3, #200	; 0xc8
 800025a:	613b      	str	r3, [r7, #16]
			count_1 = 3;
 800025c:	2303      	movs	r3, #3
 800025e:	61fb      	str	r3, [r7, #28]
			break;
 8000260:	e017      	b.n	8000292 <main+0xe6>
			status_1 = YELLOW;
 8000262:	2302      	movs	r3, #2
 8000264:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2120      	movs	r1, #32
 800026a:	484e      	ldr	r0, [pc, #312]	; (80003a4 <main+0x1f8>)
 800026c:	f001 f8e8 	bl	8001440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2140      	movs	r1, #64	; 0x40
 8000274:	484b      	ldr	r0, [pc, #300]	; (80003a4 <main+0x1f8>)
 8000276:	f001 f8e3 	bl	8001440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	4849      	ldr	r0, [pc, #292]	; (80003a4 <main+0x1f8>)
 8000280:	f001 f8de 	bl	8001440 <HAL_GPIO_WritePin>
			time_counter_1 = GREEN_TIME/DELAY;
 8000284:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000288:	613b      	str	r3, [r7, #16]
			count_1 = 4;
 800028a:	2304      	movs	r3, #4
 800028c:	61fb      	str	r3, [r7, #28]
			break;
 800028e:	e000      	b.n	8000292 <main+0xe6>
			break;
 8000290:	bf00      	nop
		}
	}
	if(time_counter_2 > 0) {
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	2b00      	cmp	r3, #0
 8000296:	dd03      	ble.n	80002a0 <main+0xf4>
			time_counter_2--;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	e05a      	b.n	8000356 <main+0x1aa>
		}else {
			switch(status_2){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d03c      	beq.n	8000320 <main+0x174>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	dc53      	bgt.n	8000354 <main+0x1a8>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d003      	beq.n	80002ba <main+0x10e>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d01a      	beq.n	80002ee <main+0x142>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
				time_counter_2 = GREEN_TIME/DELAY;
				count_2 = 4;
				break;
			default:
				break;
 80002b8:	e04c      	b.n	8000354 <main+0x1a8>
				status_2 = GREEN;
 80002ba:	2303      	movs	r3, #3
 80002bc:	607b      	str	r3, [r7, #4]
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c4:	4837      	ldr	r0, [pc, #220]	; (80003a4 <main+0x1f8>)
 80002c6:	f001 f8bb 	bl	8001440 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d0:	4834      	ldr	r0, [pc, #208]	; (80003a4 <main+0x1f8>)
 80002d2:	f001 f8b5 	bl	8001440 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002dc:	4831      	ldr	r0, [pc, #196]	; (80003a4 <main+0x1f8>)
 80002de:	f001 f8af 	bl	8001440 <HAL_GPIO_WritePin>
				time_counter_2 = RED_TIME/DELAY;
 80002e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002e6:	60fb      	str	r3, [r7, #12]
				count_2 = 6;
 80002e8:	2306      	movs	r3, #6
 80002ea:	61bb      	str	r3, [r7, #24]
				break;
 80002ec:	e033      	b.n	8000356 <main+0x1aa>
				status_2 = RED;
 80002ee:	2301      	movs	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	482a      	ldr	r0, [pc, #168]	; (80003a4 <main+0x1f8>)
 80002fa:	f001 f8a1 	bl	8001440 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000304:	4827      	ldr	r0, [pc, #156]	; (80003a4 <main+0x1f8>)
 8000306:	f001 f89b 	bl	8001440 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000310:	4824      	ldr	r0, [pc, #144]	; (80003a4 <main+0x1f8>)
 8000312:	f001 f895 	bl	8001440 <HAL_GPIO_WritePin>
				time_counter_2 = YELLOW_TIME/DELAY;
 8000316:	23c8      	movs	r3, #200	; 0xc8
 8000318:	60fb      	str	r3, [r7, #12]
				count_2 = 3;
 800031a:	2303      	movs	r3, #3
 800031c:	61bb      	str	r3, [r7, #24]
				break;
 800031e:	e01a      	b.n	8000356 <main+0x1aa>
				status_2 = YELLOW;
 8000320:	2302      	movs	r3, #2
 8000322:	607b      	str	r3, [r7, #4]
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032a:	481e      	ldr	r0, [pc, #120]	; (80003a4 <main+0x1f8>)
 800032c:	f001 f888 	bl	8001440 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000336:	481b      	ldr	r0, [pc, #108]	; (80003a4 <main+0x1f8>)
 8000338:	f001 f882 	bl	8001440 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000342:	4818      	ldr	r0, [pc, #96]	; (80003a4 <main+0x1f8>)
 8000344:	f001 f87c 	bl	8001440 <HAL_GPIO_WritePin>
				time_counter_2 = GREEN_TIME/DELAY;
 8000348:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800034c:	60fb      	str	r3, [r7, #12]
				count_2 = 4;
 800034e:	2304      	movs	r3, #4
 8000350:	61bb      	str	r3, [r7, #24]
				break;
 8000352:	e000      	b.n	8000356 <main+0x1aa>
				break;
 8000354:	bf00      	nop
			}
		}
	if(time_counter_7seg > 0) {
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	2b00      	cmp	r3, #0
 800035a:	dd03      	ble.n	8000364 <main+0x1b8>
		time_counter_7seg--;
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	3b01      	subs	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	e01b      	b.n	800039c <main+0x1f0>
	} else {
		count_2--;
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	3b01      	subs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
		count_1--;
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	3b01      	subs	r3, #1
 800036e:	61fb      	str	r3, [r7, #28]
		if(count_1 < 0) {
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	2b00      	cmp	r3, #0
 8000374:	da01      	bge.n	800037a <main+0x1ce>
			count_1 = 6;
 8000376:	2306      	movs	r3, #6
 8000378:	61fb      	str	r3, [r7, #28]
		}
		if(count_2 < 0) {
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	2b00      	cmp	r3, #0
 800037e:	da01      	bge.n	8000384 <main+0x1d8>
			count_2 = 6;
 8000380:	2306      	movs	r3, #6
 8000382:	61bb      	str	r3, [r7, #24]
		}
		display7SEG(count_1);
 8000384:	463b      	mov	r3, r7
 8000386:	469c      	mov	ip, r3
 8000388:	69f8      	ldr	r0, [r7, #28]
 800038a:	f000 fbc5 	bl	8000b18 <display7SEG.0>
		display7SEG_2(count_2);
 800038e:	463b      	mov	r3, r7
 8000390:	469c      	mov	ip, r3
 8000392:	69b8      	ldr	r0, [r7, #24]
 8000394:	f000 fc10 	bl	8000bb8 <display7SEG_2.11>
		time_counter_7seg = 100;
 8000398:	2364      	movs	r3, #100	; 0x64
 800039a:	617b      	str	r3, [r7, #20]
	}
	HAL_Delay(DELAY);
 800039c:	200a      	movs	r0, #10
 800039e:	f000 fdcb 	bl	8000f38 <HAL_Delay>
	if(time_counter_1 > 0) {
 80003a2:	e71d      	b.n	80001e0 <main+0x34>
 80003a4:	40010800 	.word	0x40010800

080003a8 <led7seg_1.2>:
    void led7seg_1(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2101      	movs	r1, #1
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <led7seg_1.2+0x5c>)
 80003b8:	f001 f842 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2102      	movs	r1, #2
 80003c0:	4810      	ldr	r0, [pc, #64]	; (8000404 <led7seg_1.2+0x5c>)
 80003c2:	f001 f83d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2104      	movs	r1, #4
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <led7seg_1.2+0x5c>)
 80003cc:	f001 f838 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2120      	movs	r1, #32
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <led7seg_1.2+0x5c>)
 80003d6:	f001 f833 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003e0:	4808      	ldr	r0, [pc, #32]	; (8000404 <led7seg_1.2+0x5c>)
 80003e2:	f001 f82d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <led7seg_1.2+0x5c>)
 80003ee:	f001 f827 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	4803      	ldr	r0, [pc, #12]	; (8000404 <led7seg_1.2+0x5c>)
 80003f8:	f001 f822 	bl	8001440 <HAL_GPIO_WritePin>
      }
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40010c00 	.word	0x40010c00

08000408 <led7seg_2.3>:
    void led7seg_2(){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2101      	movs	r1, #1
 8000416:	4813      	ldr	r0, [pc, #76]	; (8000464 <led7seg_2.3+0x5c>)
 8000418:	f001 f812 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2102      	movs	r1, #2
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <led7seg_2.3+0x5c>)
 8000422:	f001 f80d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2104      	movs	r1, #4
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <led7seg_2.3+0x5c>)
 800042c:	f001 f808 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2120      	movs	r1, #32
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <led7seg_2.3+0x5c>)
 8000436:	f001 f803 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <led7seg_2.3+0x5c>)
 8000442:	f000 fffd 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <led7seg_2.3+0x5c>)
 800044e:	f000 fff7 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <led7seg_2.3+0x5c>)
 8000458:	f000 fff2 	bl	8001440 <HAL_GPIO_WritePin>
      }
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <led7seg_3.4>:
    void led7seg_3(){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2101      	movs	r1, #1
 8000476:	4813      	ldr	r0, [pc, #76]	; (80004c4 <led7seg_3.4+0x5c>)
 8000478:	f000 ffe2 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4810      	ldr	r0, [pc, #64]	; (80004c4 <led7seg_3.4+0x5c>)
 8000482:	f000 ffdd 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2104      	movs	r1, #4
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <led7seg_3.4+0x5c>)
 800048c:	f000 ffd8 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2120      	movs	r1, #32
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <led7seg_3.4+0x5c>)
 8000496:	f000 ffd3 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a0:	4808      	ldr	r0, [pc, #32]	; (80004c4 <led7seg_3.4+0x5c>)
 80004a2:	f000 ffcd 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <led7seg_3.4+0x5c>)
 80004ae:	f000 ffc7 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2140      	movs	r1, #64	; 0x40
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <led7seg_3.4+0x5c>)
 80004b8:	f000 ffc2 	bl	8001440 <HAL_GPIO_WritePin>
      }
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <led7seg_4.5>:
    void led7seg_4(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2101      	movs	r1, #1
 80004d6:	4813      	ldr	r0, [pc, #76]	; (8000524 <led7seg_4.5+0x5c>)
 80004d8:	f000 ffb2 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2102      	movs	r1, #2
 80004e0:	4810      	ldr	r0, [pc, #64]	; (8000524 <led7seg_4.5+0x5c>)
 80004e2:	f000 ffad 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2104      	movs	r1, #4
 80004ea:	480e      	ldr	r0, [pc, #56]	; (8000524 <led7seg_4.5+0x5c>)
 80004ec:	f000 ffa8 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <led7seg_4.5+0x5c>)
 80004f6:	f000 ffa3 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <led7seg_4.5+0x5c>)
 8000502:	f000 ff9d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <led7seg_4.5+0x5c>)
 800050e:	f000 ff97 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <led7seg_4.5+0x5c>)
 8000518:	f000 ff92 	bl	8001440 <HAL_GPIO_WritePin>
      }
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40010c00 	.word	0x40010c00

08000528 <led7seg_5.6>:
    void led7seg_5(){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2101      	movs	r1, #1
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <led7seg_5.6+0x5c>)
 8000538:	f000 ff82 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2102      	movs	r1, #2
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <led7seg_5.6+0x5c>)
 8000542:	f000 ff7d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2104      	movs	r1, #4
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <led7seg_5.6+0x5c>)
 800054c:	f000 ff78 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <led7seg_5.6+0x5c>)
 8000556:	f000 ff73 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <led7seg_5.6+0x5c>)
 8000562:	f000 ff6d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <led7seg_5.6+0x5c>)
 800056e:	f000 ff67 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <led7seg_5.6+0x5c>)
 8000578:	f000 ff62 	bl	8001440 <HAL_GPIO_WritePin>
      }
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40010c00 	.word	0x40010c00

08000588 <led7seg_6.7>:
    void led7seg_6(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4813      	ldr	r0, [pc, #76]	; (80005e4 <led7seg_6.7+0x5c>)
 8000598:	f000 ff52 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2102      	movs	r1, #2
 80005a0:	4810      	ldr	r0, [pc, #64]	; (80005e4 <led7seg_6.7+0x5c>)
 80005a2:	f000 ff4d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2104      	movs	r1, #4
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <led7seg_6.7+0x5c>)
 80005ac:	f000 ff48 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <led7seg_6.7+0x5c>)
 80005b6:	f000 ff43 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <led7seg_6.7+0x5c>)
 80005c2:	f000 ff3d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <led7seg_6.7+0x5c>)
 80005ce:	f000 ff37 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2140      	movs	r1, #64	; 0x40
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <led7seg_6.7+0x5c>)
 80005d8:	f000 ff32 	bl	8001440 <HAL_GPIO_WritePin>
      }
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <led7seg_7.8>:
    void led7seg_7(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <led7seg_7.8+0x5c>)
 80005f8:	f000 ff22 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <led7seg_7.8+0x5c>)
 8000602:	f000 ff1d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <led7seg_7.8+0x5c>)
 800060c:	f000 ff18 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2120      	movs	r1, #32
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <led7seg_7.8+0x5c>)
 8000616:	f000 ff13 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <led7seg_7.8+0x5c>)
 8000622:	f000 ff0d 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <led7seg_7.8+0x5c>)
 800062e:	f000 ff07 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <led7seg_7.8+0x5c>)
 8000638:	f000 ff02 	bl	8001440 <HAL_GPIO_WritePin>
      }
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40010c00 	.word	0x40010c00

08000648 <led7seg_8.9>:
    void led7seg_8(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2101      	movs	r1, #1
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <led7seg_8.9+0x5c>)
 8000658:	f000 fef2 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2102      	movs	r1, #2
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <led7seg_8.9+0x5c>)
 8000662:	f000 feed 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2104      	movs	r1, #4
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <led7seg_8.9+0x5c>)
 800066c:	f000 fee8 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2120      	movs	r1, #32
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <led7seg_8.9+0x5c>)
 8000676:	f000 fee3 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <led7seg_8.9+0x5c>)
 8000682:	f000 fedd 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <led7seg_8.9+0x5c>)
 800068e:	f000 fed7 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <led7seg_8.9+0x5c>)
 8000698:	f000 fed2 	bl	8001440 <HAL_GPIO_WritePin>
      }
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <led7seg_9.10>:
    void led7seg_9(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	f8c7 c004 	str.w	ip, [r7, #4]
  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	4813      	ldr	r0, [pc, #76]	; (8000704 <led7seg_9.10+0x5c>)
 80006b8:	f000 fec2 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <led7seg_9.10+0x5c>)
 80006c2:	f000 febd 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <led7seg_9.10+0x5c>)
 80006cc:	f000 feb8 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2120      	movs	r1, #32
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <led7seg_9.10+0x5c>)
 80006d6:	f000 feb3 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <led7seg_9.10+0x5c>)
 80006e2:	f000 fead 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <led7seg_9.10+0x5c>)
 80006ee:	f000 fea7 	bl	8001440 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <led7seg_9.10+0x5c>)
 80006f8:	f000 fea2 	bl	8001440 <HAL_GPIO_WritePin>
      }
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40010c00 	.word	0x40010c00

08000708 <led7seg_0_2.12>:
    void led7seg_0_2(){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4815      	ldr	r0, [pc, #84]	; (800076c <led7seg_0_2.12+0x64>)
 8000718:	f000 fe92 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <led7seg_0_2.12+0x64>)
 8000724:	f000 fe8c 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <led7seg_0_2.12+0x64>)
 8000730:	f000 fe86 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <led7seg_0_2.12+0x64>)
 800073c:	f000 fe80 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <led7seg_0_2.12+0x64>)
 8000748:	f000 fe7a 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <led7seg_0_2.12+0x64>)
 8000754:	f000 fe74 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <led7seg_0_2.12+0x64>)
 8000760:	f000 fe6e 	bl	8001440 <HAL_GPIO_WritePin>
        }
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40010c00 	.word	0x40010c00

08000770 <led7seg_1_2.13>:
        void led7seg_1_2(){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <led7seg_1_2.13+0x64>)
 8000780:	f000 fe5e 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <led7seg_1_2.13+0x64>)
 800078c:	f000 fe58 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <led7seg_1_2.13+0x64>)
 8000798:	f000 fe52 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <led7seg_1_2.13+0x64>)
 80007a4:	f000 fe4c 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <led7seg_1_2.13+0x64>)
 80007b0:	f000 fe46 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <led7seg_1_2.13+0x64>)
 80007bc:	f000 fe40 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <led7seg_1_2.13+0x64>)
 80007c8:	f000 fe3a 	bl	8001440 <HAL_GPIO_WritePin>
          }
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <led7seg_2_2.14>:
        void led7seg_2_2(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <led7seg_2_2.14+0x64>)
 80007e8:	f000 fe2a 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <led7seg_2_2.14+0x64>)
 80007f4:	f000 fe24 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <led7seg_2_2.14+0x64>)
 8000800:	f000 fe1e 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <led7seg_2_2.14+0x64>)
 800080c:	f000 fe18 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <led7seg_2_2.14+0x64>)
 8000818:	f000 fe12 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <led7seg_2_2.14+0x64>)
 8000824:	f000 fe0c 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <led7seg_2_2.14+0x64>)
 8000830:	f000 fe06 	bl	8001440 <HAL_GPIO_WritePin>
          }
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010c00 	.word	0x40010c00

08000840 <led7seg_3_2.15>:
        void led7seg_3_2(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	4815      	ldr	r0, [pc, #84]	; (80008a4 <led7seg_3_2.15+0x64>)
 8000850:	f000 fdf6 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <led7seg_3_2.15+0x64>)
 800085c:	f000 fdf0 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <led7seg_3_2.15+0x64>)
 8000868:	f000 fdea 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <led7seg_3_2.15+0x64>)
 8000874:	f000 fde4 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <led7seg_3_2.15+0x64>)
 8000880:	f000 fdde 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <led7seg_3_2.15+0x64>)
 800088c:	f000 fdd8 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <led7seg_3_2.15+0x64>)
 8000898:	f000 fdd2 	bl	8001440 <HAL_GPIO_WritePin>
          }
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <led7seg_4_2.16>:
        void led7seg_4_2(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <led7seg_4_2.16+0x64>)
 80008b8:	f000 fdc2 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <led7seg_4_2.16+0x64>)
 80008c4:	f000 fdbc 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <led7seg_4_2.16+0x64>)
 80008d0:	f000 fdb6 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <led7seg_4_2.16+0x64>)
 80008dc:	f000 fdb0 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <led7seg_4_2.16+0x64>)
 80008e8:	f000 fdaa 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <led7seg_4_2.16+0x64>)
 80008f4:	f000 fda4 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <led7seg_4_2.16+0x64>)
 8000900:	f000 fd9e 	bl	8001440 <HAL_GPIO_WritePin>
          }
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40010c00 	.word	0x40010c00

08000910 <led7seg_5_2.17>:
        void led7seg_5_2(){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	4815      	ldr	r0, [pc, #84]	; (8000974 <led7seg_5_2.17+0x64>)
 8000920:	f000 fd8e 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <led7seg_5_2.17+0x64>)
 800092c:	f000 fd88 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <led7seg_5_2.17+0x64>)
 8000938:	f000 fd82 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <led7seg_5_2.17+0x64>)
 8000944:	f000 fd7c 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <led7seg_5_2.17+0x64>)
 8000950:	f000 fd76 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <led7seg_5_2.17+0x64>)
 800095c:	f000 fd70 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <led7seg_5_2.17+0x64>)
 8000968:	f000 fd6a 	bl	8001440 <HAL_GPIO_WritePin>
          }
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40010c00 	.word	0x40010c00

08000978 <led7seg_6_2.18>:
        void led7seg_6_2(){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <led7seg_6_2.18+0x64>)
 8000988:	f000 fd5a 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000992:	4812      	ldr	r0, [pc, #72]	; (80009dc <led7seg_6_2.18+0x64>)
 8000994:	f000 fd54 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <led7seg_6_2.18+0x64>)
 80009a0:	f000 fd4e 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <led7seg_6_2.18+0x64>)
 80009ac:	f000 fd48 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <led7seg_6_2.18+0x64>)
 80009b8:	f000 fd42 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <led7seg_6_2.18+0x64>)
 80009c4:	f000 fd3c 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <led7seg_6_2.18+0x64>)
 80009d0:	f000 fd36 	bl	8001440 <HAL_GPIO_WritePin>
          }
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40010c00 	.word	0x40010c00

080009e0 <led7seg_7_2.19>:
        void led7seg_7_2(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	4815      	ldr	r0, [pc, #84]	; (8000a44 <led7seg_7_2.19+0x64>)
 80009f0:	f000 fd26 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <led7seg_7_2.19+0x64>)
 80009fc:	f000 fd20 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <led7seg_7_2.19+0x64>)
 8000a08:	f000 fd1a 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <led7seg_7_2.19+0x64>)
 8000a14:	f000 fd14 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <led7seg_7_2.19+0x64>)
 8000a20:	f000 fd0e 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <led7seg_7_2.19+0x64>)
 8000a2c:	f000 fd08 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <led7seg_7_2.19+0x64>)
 8000a38:	f000 fd02 	bl	8001440 <HAL_GPIO_WritePin>
          }
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <led7seg_8_2.20>:
        void led7seg_8_2(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <led7seg_8_2.20+0x64>)
 8000a58:	f000 fcf2 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <led7seg_8_2.20+0x64>)
 8000a64:	f000 fcec 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <led7seg_8_2.20+0x64>)
 8000a70:	f000 fce6 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <led7seg_8_2.20+0x64>)
 8000a7c:	f000 fce0 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <led7seg_8_2.20+0x64>)
 8000a88:	f000 fcda 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <led7seg_8_2.20+0x64>)
 8000a94:	f000 fcd4 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <led7seg_8_2.20+0x64>)
 8000aa0:	f000 fcce 	bl	8001440 <HAL_GPIO_WritePin>
          }
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <led7seg_9_2.21>:
        void led7seg_9_2(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	f8c7 c004 	str.w	ip, [r7, #4]
      	  HAL_GPIO_WritePin(LED7_2_1_GPIO_Port, LED7_2_1_Pin, RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	4815      	ldr	r0, [pc, #84]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000ac0:	f000 fcbe 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_2_GPIO_Port, LED7_2_2_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000acc:	f000 fcb8 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_3_GPIO_Port, LED7_2_3_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000ad8:	f000 fcb2 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_4_GPIO_Port, LED7_2_4_Pin, RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000ae4:	f000 fcac 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_5_GPIO_Port, LED7_2_5_Pin, SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000af0:	f000 fca6 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_6_GPIO_Port, LED7_2_6_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000afc:	f000 fca0 	bl	8001440 <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(LED7_2_7_GPIO_Port, LED7_2_7_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <led7seg_9_2.21+0x64>)
 8000b08:	f000 fc9a 	bl	8001440 <HAL_GPIO_WritePin>
          }
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <display7SEG.0>:
    void display7SEG(int num){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	4663      	mov	r3, ip
 8000b22:	f8c7 c000 	str.w	ip, [r7]
  	  switch(num){
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	2a09      	cmp	r2, #9
 8000b2a:	d83f      	bhi.n	8000bac <display7SEG.0+0x94>
 8000b2c:	a101      	add	r1, pc, #4	; (adr r1, 8000b34 <display7SEG.0+0x1c>)
 8000b2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000b5d 	.word	0x08000b5d
 8000b38:	08000b65 	.word	0x08000b65
 8000b3c:	08000b6d 	.word	0x08000b6d
 8000b40:	08000b75 	.word	0x08000b75
 8000b44:	08000b7d 	.word	0x08000b7d
 8000b48:	08000b85 	.word	0x08000b85
 8000b4c:	08000b8d 	.word	0x08000b8d
 8000b50:	08000b95 	.word	0x08000b95
 8000b54:	08000b9d 	.word	0x08000b9d
 8000b58:	08000ba5 	.word	0x08000ba5
  		  led7seg_0();
 8000b5c:	469c      	mov	ip, r3
 8000b5e:	f7ff faf5 	bl	800014c <led7seg_0.1>
  		  break;
 8000b62:	e024      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_1();
 8000b64:	469c      	mov	ip, r3
 8000b66:	f7ff fc1f 	bl	80003a8 <led7seg_1.2>
  		  break;
 8000b6a:	e020      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_2();
 8000b6c:	469c      	mov	ip, r3
 8000b6e:	f7ff fc4b 	bl	8000408 <led7seg_2.3>
  		  break;
 8000b72:	e01c      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_3();
 8000b74:	469c      	mov	ip, r3
 8000b76:	f7ff fc77 	bl	8000468 <led7seg_3.4>
  		  break;
 8000b7a:	e018      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_4();
 8000b7c:	469c      	mov	ip, r3
 8000b7e:	f7ff fca3 	bl	80004c8 <led7seg_4.5>
  		  break;
 8000b82:	e014      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_5();
 8000b84:	469c      	mov	ip, r3
 8000b86:	f7ff fccf 	bl	8000528 <led7seg_5.6>
  		  break;
 8000b8a:	e010      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_6();
 8000b8c:	469c      	mov	ip, r3
 8000b8e:	f7ff fcfb 	bl	8000588 <led7seg_6.7>
  		  break;
 8000b92:	e00c      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_7();
 8000b94:	469c      	mov	ip, r3
 8000b96:	f7ff fd27 	bl	80005e8 <led7seg_7.8>
  		  break;
 8000b9a:	e008      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_8();
 8000b9c:	469c      	mov	ip, r3
 8000b9e:	f7ff fd53 	bl	8000648 <led7seg_8.9>
  		  break;
 8000ba2:	e004      	b.n	8000bae <display7SEG.0+0x96>
  		  led7seg_9();
 8000ba4:	469c      	mov	ip, r3
 8000ba6:	f7ff fd7f 	bl	80006a8 <led7seg_9.10>
  		  break;
 8000baa:	e000      	b.n	8000bae <display7SEG.0+0x96>
  		  break;
 8000bac:	bf00      	nop
    }
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop

08000bb8 <display7SEG_2.11>:
    void display7SEG_2(int num){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	f8c7 c000 	str.w	ip, [r7]
      	  switch(num){
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	2a09      	cmp	r2, #9
 8000bca:	d83f      	bhi.n	8000c4c <display7SEG_2.11+0x94>
 8000bcc:	a101      	add	r1, pc, #4	; (adr r1, 8000bd4 <display7SEG_2.11+0x1c>)
 8000bce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	08000c05 	.word	0x08000c05
 8000bdc:	08000c0d 	.word	0x08000c0d
 8000be0:	08000c15 	.word	0x08000c15
 8000be4:	08000c1d 	.word	0x08000c1d
 8000be8:	08000c25 	.word	0x08000c25
 8000bec:	08000c2d 	.word	0x08000c2d
 8000bf0:	08000c35 	.word	0x08000c35
 8000bf4:	08000c3d 	.word	0x08000c3d
 8000bf8:	08000c45 	.word	0x08000c45
      		  led7seg_0_2();
 8000bfc:	469c      	mov	ip, r3
 8000bfe:	f7ff fd83 	bl	8000708 <led7seg_0_2.12>
      		  break;
 8000c02:	e024      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_1_2();
 8000c04:	469c      	mov	ip, r3
 8000c06:	f7ff fdb3 	bl	8000770 <led7seg_1_2.13>
      		  break;
 8000c0a:	e020      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_2_2();
 8000c0c:	469c      	mov	ip, r3
 8000c0e:	f7ff fde3 	bl	80007d8 <led7seg_2_2.14>
      		  break;
 8000c12:	e01c      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_3_2();
 8000c14:	469c      	mov	ip, r3
 8000c16:	f7ff fe13 	bl	8000840 <led7seg_3_2.15>
      		  break;
 8000c1a:	e018      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_4_2();
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	f7ff fe43 	bl	80008a8 <led7seg_4_2.16>
      		  break;
 8000c22:	e014      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_5_2();
 8000c24:	469c      	mov	ip, r3
 8000c26:	f7ff fe73 	bl	8000910 <led7seg_5_2.17>
      		  break;
 8000c2a:	e010      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_6_2();
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	f7ff fea3 	bl	8000978 <led7seg_6_2.18>
      		  break;
 8000c32:	e00c      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_7_2();
 8000c34:	469c      	mov	ip, r3
 8000c36:	f7ff fed3 	bl	80009e0 <led7seg_7_2.19>
      		  break;
 8000c3a:	e008      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_8_2();
 8000c3c:	469c      	mov	ip, r3
 8000c3e:	f7ff ff03 	bl	8000a48 <led7seg_8_2.20>
      		  break;
 8000c42:	e004      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  led7seg_9_2();
 8000c44:	469c      	mov	ip, r3
 8000c46:	f7ff ff33 	bl	8000ab0 <led7seg_9_2.21>
      		  break;
 8000c4a:	e000      	b.n	8000c4e <display7SEG_2.11+0x96>
      		  break;
 8000c4c:	bf00      	nop
        }
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b090      	sub	sp, #64	; 0x40
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	2228      	movs	r2, #40	; 0x28
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f804 	bl	8001c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c82:	2310      	movs	r3, #16
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fbee 	bl	8001470 <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c9a:	f000 f86f 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fe5c 	bl	8001974 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 f85b 	bl	8000d7c <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3740      	adds	r7, #64	; 0x40
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_GPIO_Init+0xa0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_GPIO_Init+0xa0>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_GPIO_Init+0xa0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_GPIO_Init+0xa0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <MX_GPIO_Init+0xa0>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_GPIO_Init+0xa0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_GREEN_1_Pin|LED_YELLOW_1_Pin|LED_RED_2_Pin
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000d1a:	4816      	ldr	r0, [pc, #88]	; (8000d74 <MX_GPIO_Init+0xa4>)
 8000d1c:	f000 fb90 	bl	8001440 <HAL_GPIO_WritePin>
                          |LED_GREEN_2_Pin|LED_YELLOW_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_1_Pin|LED7_2_Pin|LED7_3_Pin|LED7_2_4_Pin
 8000d20:	2200      	movs	r2, #0
 8000d22:	f64f 71e7 	movw	r1, #65511	; 0xffe7
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000d28:	f000 fb8a 	bl	8001440 <HAL_GPIO_WritePin>
                          |LED7_6_Pin|LED7_4_Pin|LED7_7_Pin|LED7_2_1_Pin
                          |LED7_2_2_Pin|LED7_2_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_GREEN_1_Pin LED_YELLOW_1_Pin LED_RED_2_Pin
                           LED_GREEN_2_Pin LED_YELLOW_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_GREEN_1_Pin|LED_YELLOW_1_Pin|LED_RED_2_Pin
 8000d2c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d30:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_2_Pin|LED_YELLOW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <MX_GPIO_Init+0xa4>)
 8000d46:	f000 f9ff 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_1_Pin LED7_2_Pin LED7_3_Pin LED7_2_4_Pin
                           LED7_2_5_Pin LED7_2_6_Pin LED7_2_7_Pin LED7_5_Pin
                           LED7_6_Pin LED7_4_Pin LED7_7_Pin LED7_2_1_Pin
                           LED7_2_2_Pin LED7_2_3_Pin */
  GPIO_InitStruct.Pin = LED7_1_Pin|LED7_2_Pin|LED7_3_Pin|LED7_2_4_Pin
 8000d4a:	f64f 73e7 	movw	r3, #65511	; 0xffe7
 8000d4e:	60bb      	str	r3, [r7, #8]
                          |LED7_2_5_Pin|LED7_2_6_Pin|LED7_2_7_Pin|LED7_5_Pin
                          |LED7_6_Pin|LED7_4_Pin|LED7_7_Pin|LED7_2_1_Pin
                          |LED7_2_2_Pin|LED7_2_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000d64:	f000 f9f0 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010800 	.word	0x40010800
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_MspInit+0x40>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_MspInit+0x40>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_MspInit+0x40>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_MspInit+0x40>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_MspInit+0x40>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_MspInit+0x40>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f875 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
	...

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fff7 	bl	8000e1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2e:	490c      	ldr	r1, [pc, #48]	; (8000e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e30:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e44:	4c09      	ldr	r4, [pc, #36]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f000 feeb 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff f9a9 	bl	80001ac <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e64:	08001cc8 	.word	0x08001cc8
  ldr r2, =_sbss
 8000e68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e6c:	2000002c 	.word	0x2000002c

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f92b 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff ff7a 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f935 	bl	800112e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000028 	.word	0x20000028

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000028 	.word	0x20000028

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff0 	bl	8000f24 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffe0 	bl	8000f24 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff90 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff49 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e161      	b.n	8001420 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8150 	bne.w	800141a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a97      	ldr	r2, [pc, #604]	; (80013dc <HAL_GPIO_Init+0x294>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d05e      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001184:	4a95      	ldr	r2, [pc, #596]	; (80013dc <HAL_GPIO_Init+0x294>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d875      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 800118a:	4a95      	ldr	r2, [pc, #596]	; (80013e0 <HAL_GPIO_Init+0x298>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d058      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001190:	4a93      	ldr	r2, [pc, #588]	; (80013e0 <HAL_GPIO_Init+0x298>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d86f      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 8001196:	4a93      	ldr	r2, [pc, #588]	; (80013e4 <HAL_GPIO_Init+0x29c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 800119c:	4a91      	ldr	r2, [pc, #580]	; (80013e4 <HAL_GPIO_Init+0x29c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d869      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011a2:	4a91      	ldr	r2, [pc, #580]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04c      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011a8:	4a8f      	ldr	r2, [pc, #572]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d863      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ae:	4a8f      	ldr	r2, [pc, #572]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011b4:	4a8d      	ldr	r2, [pc, #564]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d85d      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d82a      	bhi.n	8001214 <HAL_GPIO_Init+0xcc>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d859      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <HAL_GPIO_Init+0x80>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	08001243 	.word	0x08001243
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001271 	.word	0x08001271
 80011d8:	08001277 	.word	0x08001277
 80011dc:	08001277 	.word	0x08001277
 80011e0:	08001277 	.word	0x08001277
 80011e4:	08001277 	.word	0x08001277
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001277 	.word	0x08001277
 80011f0:	08001277 	.word	0x08001277
 80011f4:	08001277 	.word	0x08001277
 80011f8:	08001277 	.word	0x08001277
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001277 	.word	0x08001277
 8001204:	08001277 	.word	0x08001277
 8001208:	08001277 	.word	0x08001277
 800120c:	08001225 	.word	0x08001225
 8001210:	08001239 	.word	0x08001239
 8001214:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121a:	e02c      	b.n	8001276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e029      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e024      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e01f      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	330c      	adds	r3, #12
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e01a      	b.n	8001278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124a:	2304      	movs	r3, #4
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e013      	b.n	8001278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	611a      	str	r2, [r3, #16]
          break;
 8001262:	e009      	b.n	8001278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
          break;
 800126e:	e003      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x130>
          break;
 8001276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d801      	bhi.n	8001282 <HAL_GPIO_Init+0x13a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_Init+0x13e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d802      	bhi.n	8001294 <HAL_GPIO_Init+0x14c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x152>
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3b08      	subs	r3, #8
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	210f      	movs	r1, #15
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80a9 	beq.w	800141a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e0:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <HAL_GPIO_Init+0x2b4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3b      	ldr	r2, [pc, #236]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1d8>
 800131c:	2302      	movs	r3, #2
 800131e:	e004      	b.n	800132a <HAL_GPIO_Init+0x1e2>
 8001320:	2303      	movs	r3, #3
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x1e2>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_GPIO_Init+0x1e2>
 8001328:	2300      	movs	r3, #0
 800132a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4093      	lsls	r3, r2
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800133a:	492f      	ldr	r1, [pc, #188]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	492b      	ldr	r1, [pc, #172]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 800136c:	4013      	ands	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4921      	ldr	r1, [pc, #132]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	491d      	ldr	r1, [pc, #116]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001394:	4013      	ands	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4917      	ldr	r1, [pc, #92]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4913      	ldr	r1, [pc, #76]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01f      	beq.n	800140c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	490d      	ldr	r1, [pc, #52]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e01f      	b.n	800141a <HAL_GPIO_Init+0x2d2>
 80013da:	bf00      	nop
 80013dc:	10320000 	.word	0x10320000
 80013e0:	10310000 	.word	0x10310000
 80013e4:	10220000 	.word	0x10220000
 80013e8:	10210000 	.word	0x10210000
 80013ec:	10120000 	.word	0x10120000
 80013f0:	10110000 	.word	0x10110000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40010800 	.word	0x40010800
 8001400:	40010c00 	.word	0x40010c00
 8001404:	40011000 	.word	0x40011000
 8001408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_GPIO_Init+0x2f4>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	43db      	mvns	r3, r3
 8001414:	4909      	ldr	r1, [pc, #36]	; (800143c <HAL_GPIO_Init+0x2f4>)
 8001416:	4013      	ands	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	3301      	adds	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	fa22 f303 	lsr.w	r3, r2, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	f47f ae96 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	372c      	adds	r7, #44	; 0x2c
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e272      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b04      	cmp	r3, #4
 800149a:	d00c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149c:	4b8f      	ldr	r3, [pc, #572]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d112      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
 80014a8:	4b8c      	ldr	r3, [pc, #560]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d10b      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d06c      	beq.n	800159c <HAL_RCC_OscConfig+0x12c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d168      	bne.n	800159c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e24c      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x76>
 80014d8:	4b80      	ldr	r3, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a7f      	ldr	r2, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e02e      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b7b      	ldr	r3, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7a      	ldr	r2, [pc, #488]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b78      	ldr	r3, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a77      	ldr	r2, [pc, #476]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0xbc>
 8001512:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a71      	ldr	r2, [pc, #452]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 800152c:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a67      	ldr	r2, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fcea 	bl	8000f24 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fce6 	bl	8000f24 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e200      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xe4>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcd6 	bl	8000f24 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcd2 	bl	8000f24 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1ec      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x10c>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b6:	4b49      	ldr	r3, [pc, #292]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1c0      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4939      	ldr	r1, [pc, #228]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fc8b 	bl	8000f24 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fc87 	bl	8000f24 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1a1      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4927      	ldr	r1, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc6a 	bl	8000f24 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fc66 	bl	8000f24 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e180      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03a      	beq.n	80016f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x274>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fc4a 	bl	8000f24 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fc46 	bl	8000f24 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e160      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 fa9c 	bl	8001bf0 <RCC_Delay>
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc30 	bl	8000f24 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	e00f      	b.n	80016e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc2c 	bl	8000f24 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d908      	bls.n	80016e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e146      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	42420000 	.word	0x42420000
 80016e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e9      	bne.n	80016c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a6 	beq.w	800184e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001706:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b88      	ldr	r3, [pc, #544]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b85      	ldr	r3, [pc, #532]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b82      	ldr	r3, [pc, #520]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7e      	ldr	r2, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbed 	bl	8000f24 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fbe9 	bl	8000f24 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	; 0x64
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e103      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b75      	ldr	r3, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x312>
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a6e      	ldr	r2, [pc, #440]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e02d      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x334>
 800178a:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a69      	ldr	r2, [pc, #420]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b67      	ldr	r3, [pc, #412]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a66      	ldr	r2, [pc, #408]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	e01c      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x356>
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017c6:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b58      	ldr	r3, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d015      	beq.n	8001812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb9d 	bl	8000f24 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb99 	bl	8000f24 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0b1      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ee      	beq.n	80017ee <HAL_RCC_OscConfig+0x37e>
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb87 	bl	8000f24 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb83 	bl	8000f24 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e09b      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d105      	bne.n	800184e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a3b      	ldr	r2, [pc, #236]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8087 	beq.w	8001966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d061      	beq.n	8001928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d146      	bne.n	80018fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_RCC_OscConfig+0x4cc>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb57 	bl	8000f24 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb53 	bl	8000f24 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e06d      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4921      	ldr	r1, [pc, #132]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a19      	ldr	r1, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	430b      	orrs	r3, r1
 80018c6:	491b      	ldr	r1, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb27 	bl	8000f24 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb23 	bl	8000f24 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e03d      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x46a>
 80018f8:	e035      	b.n	8001966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_RCC_OscConfig+0x4cc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb10 	bl	8000f24 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb0c 	bl	8000f24 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e026      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x498>
 8001926:	e01e      	b.n	8001966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e019      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
 8001934:	40021000 	.word	0x40021000
 8001938:	40007000 	.word	0x40007000
 800193c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x500>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	429a      	cmp	r2, r3
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0d0      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4965      	ldr	r1, [pc, #404]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d040      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e073      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06b      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4936      	ldr	r1, [pc, #216]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fa5e 	bl	8000f24 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff fa5a 	bl	8000f24 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e053      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d210      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4922      	ldr	r1, [pc, #136]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e032      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4916      	ldr	r1, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f821 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490a      	ldr	r1, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1cc>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f9bc 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08001c9c 	.word	0x08001c9c
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x30>
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x36>
 8001b76:	e027      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7a:	613b      	str	r3, [r7, #16]
      break;
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0c5b      	lsrs	r3, r3, #17
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	fb03 f202 	mul.w	r2, r3, r2
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e004      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	613b      	str	r3, [r7, #16]
      break;
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bca:	613b      	str	r3, [r7, #16]
      break;
 8001bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bce:	693b      	ldr	r3, [r7, #16]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	007a1200 	.word	0x007a1200
 8001be4:	08001cac 	.word	0x08001cac
 8001be8:	08001cbc 	.word	0x08001cbc
 8001bec:	003d0900 	.word	0x003d0900

08001bf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <RCC_Delay+0x34>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <RCC_Delay+0x38>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0a5b      	lsrs	r3, r3, #9
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c0c:	bf00      	nop
  }
  while (Delay --);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <RCC_Delay+0x1c>
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000000 	.word	0x20000000
 8001c28:	10624dd3 	.word	0x10624dd3

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	2600      	movs	r6, #0
 8001c30:	4d0c      	ldr	r5, [pc, #48]	; (8001c64 <__libc_init_array+0x38>)
 8001c32:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c34:	1b64      	subs	r4, r4, r5
 8001c36:	10a4      	asrs	r4, r4, #2
 8001c38:	42a6      	cmp	r6, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	f000 f822 	bl	8001c84 <_init>
 8001c40:	2600      	movs	r6, #0
 8001c42:	4d0a      	ldr	r5, [pc, #40]	; (8001c6c <__libc_init_array+0x40>)
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <__libc_init_array+0x44>)
 8001c46:	1b64      	subs	r4, r4, r5
 8001c48:	10a4      	asrs	r4, r4, #2
 8001c4a:	42a6      	cmp	r6, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c54:	4798      	blx	r3
 8001c56:	3601      	adds	r6, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5e:	4798      	blx	r3
 8001c60:	3601      	adds	r6, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001cc0 	.word	0x08001cc0
 8001c68:	08001cc0 	.word	0x08001cc0
 8001c6c:	08001cc0 	.word	0x08001cc0
 8001c70:	08001cc4 	.word	0x08001cc4

08001c74 <memset>:
 8001c74:	4603      	mov	r3, r0
 8001c76:	4402      	add	r2, r0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <memset+0xa>
 8001c7c:	4770      	bx	lr
 8001c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c82:	e7f9      	b.n	8001c78 <memset+0x4>

08001c84 <_init>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr

08001c90 <_fini>:
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	bf00      	nop
 8001c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c96:	bc08      	pop	{r3}
 8001c98:	469e      	mov	lr, r3
 8001c9a:	4770      	bx	lr
